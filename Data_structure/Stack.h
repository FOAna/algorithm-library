template <class T>
struct Elem // Элемент стека
{
	T data; // Какие-то данные
	Elem<T>* prev; // Указатель на предыдущий элемент стека
};


template <class T>
struct Stack // Стек
{
	Elem<T> *head = new Elem<T>; // Голова - верхний элемент стека 
};


//Принимает указатель на ещё не заполненный элемент стека, удаляет и возвращает верхний существующий элемент со стека. **Не передавать указатель на пустой стек**
template <class T>
T Pop(Stack<T> *&stack) 
{
	Elem<T> *tmp = stack->head; // Создаем указатель на вершину стека.
	stack->head = stack->head->prev; // Перемещаемся к предыдущему элементу стека.
	T data = stack->head->data; // Копируем данные со стека в переменную.
	delete tmp; // Освобождаем память, занятую под элемент.

	return data;
}


// Принимает указатель на ещё не заполненный элемент стека и элемент - данные, которые нужно добавить на стек, добавляет элемент в начало стека (на самую вершину).
template <class T>
void Push(Stack<T> *&stack, T data)
{
	stack->head->data = data; // Заполняем данными пустой элемент вершины стека.
	Elem<T> *tmp = new Elem<T>; // Выделяем память под новый элемент стека.
	tmp->prev = stack->head; // Связываем новый элемент с головой стека.
	stack->head = tmp; // Перемещаемся к новосозданному элементу стека.
}